{
  "paragraphs": [
    {
      "text": "# Importação das bibliotecas\n\nfrom nltk.corpus import stopwords\nfrom gensim.models.word2vec import Word2Vec\nfrom gensim.models.keyedvectors import KeyedVectors\nfrom alpenglow.offline.evaluation import NdcgScore\nfrom scipy import spatial\nimport gensim.downloader as api\nimport pandas as pd\nimport re\nimport csv",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538348286499_1488857311",
      "id": "20180930-195806_2005730821",
      "dateCreated": "Sep 30, 2018 7:58:06 PM",
      "dateStarted": "Oct 26, 2018 5:24:14 PM",
      "dateFinished": "Oct 26, 2018 5:24:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "#model \u003d KeyedVectors.load_word2vec_format(\u0027embeddings/GoogleNews-vectors-negative300.bin\u0027, binary\u003dTrue)\nmodel \u003d KeyedVectors.load_word2vec_format(\u0027embeddings/wiki.en.vec.bin\u0027, binary\u003dTrue)",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349815940_-774054595",
      "id": "20180930-202335_2077469486",
      "dateCreated": "Sep 30, 2018 8:23:35 PM",
      "dateStarted": "Oct 26, 2018 5:24:14 PM",
      "dateFinished": "Oct 26, 2018 5:42:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "train_batch \u003d pd.read_csv(\u0027train_batch.csv\u0027, header\u003dNone, names\u003d[\u0027time\u0027,\u0027user\u0027,\u0027item\u0027])\ntest_batch \u003d pd.read_csv(\u0027test_batch.csv\u0027, header\u003dNone, names\u003d[\u0027time\u0027,\u0027user\u0027,\u0027item\u0027])\n    \ntest_relevant \u003d test_batch[test_batch.user.isin(train_batch.user)]\ntest_relevant[\u0027score\u0027]\u003d1",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1539041138761_-1174947220",
      "id": "20181008-202538_966051959",
      "dateCreated": "Oct 8, 2018 8:25:38 PM",
      "dateStarted": "Oct 26, 2018 5:24:22 PM",
      "dateFinished": "Oct 26, 2018 5:43:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Vetores de palavras e expressões regulares a serem retiradas do texto\n\nstop_words \u003d set(stopwords.words(\u0027english\u0027))\n\nmore_common \u003d [\u0027with\u0027, \u0027history\u0027, \u0027patient\u0027, \u0027pain\u0027, \u0027present\u0027, \u0027hospital\u0027, \u0027illness\u0027, \u0027that\u0027, \u0027from\u0027, \u0027this\u0027, \u0027denies\u0027, \u0027chest\u0027, \u0027last\u0027, \u0027which\u0027, \u0027were\u0027, \u0027given\u0027, \u0027name\u0027, \u0027year\u0027, \u0027have\u0027, \u0027been\u0027, \u0027also\u0027, \u0027showed\u0027, \u0027transferred\u0027, \u0027found\u0027, \u0027after\u0027, \u0027prior\u0027, \u0027started\u0027, \u0027days\u0027, \u0027known\u0027, \u0027left\u0027, \u0027admitted\u0027, \u0027then\u0027, \u0027recent\u0027, \u0027noted\u0027, \u0027presented\u0027, \u0027right\u0027, \u0027abdominal\u0027, \u0027time\u0027, \u0027admission\u0027, \u0027reports\u0027, \u0027over\u0027, \u0027well\u0027, \u0027received\u0027, \u0027cough\u0027, \u0027negative\u0027, \u0027past\u0027, \u0027presents\u0027, \u0027lastname\u0027, \u0027further\u0027, \u0027home\u0027, \u0027chills\u0027, \u0027placed\u0027, \u0027male\u0027, \u0027when\u0027, \u0027shortness\u0027, \u0027since\u0027, \u0027disease\u0027, \u0027symptoms\u0027, \u0027diarrhea\u0027, \u0027today\u0027, \u0027recently\u0027, \u0027female\u0027, \u0027initial\u0027, \u0027dyspnea\u0027, \u0027baseline\u0027, \u0027revealed\u0027, \u0027transfer\u0027, \u0027arrival\u0027, \u0027severe\u0027, \u0027felt\u0027, \u0027developed\u0027, \u0027increased\u0027, \u0027back\u0027, \u0027evaluation\u0027, \u0027acute\u0027, \u0027some\u0027, \u0027night\u0027, \u0027during\u0027, \u0027there\u0027, \u0027micu\u0027, \u0027initially\u0027, \u0027without\u0027, \u0027states\u0027, \u0027only\u0027, \u0027treated\u0027, \u0027changes\u0027, \u0027worsening\u0027, \u0027significant\u0027, \u0027note\u0027, \u0027admission\u0027, \u0027birth\u0027, \u0027first\u0027,  \u0027name\u0027, \u0027last\u0027, \u0027completed\u0027, \u0027phone\u0027, \u0027date\u0027, \u0027years\u0027, \u0027old\u0027, \u0027others\u0027, \u0027other\u0027, \u0027day\u0027, \u0027days\u0027, \u0027month\u0027, \u0027months\u0027, \u0027night\u0027, \u0027change\u0027, \u0027upon\u0027, \u0027cath\u0027, \u0027addition\u0027, \u0027progressive\u0027, \u0027multiple\u0027, \u0027location\u0027, \u0027fixed\u0027, \u0027going\u0027, \u0027increasing\u0027, \u0027less\u0027, \u0027nothing\u0027, \u0027hours\u0027, \u0027normal\u0027, \u0027currently\u0027, \u0027exacerbated\u0027, \u0027location\u0027, \u0027fixed\u0027, \u0027going\u0027, \u0027increasing\u0027, \u0027jaundice\u0027, \u0027unknown\u0027, \u0027onset\u0027, \u0027shortly\u0027, \u0027diag\u0027, \u0027several\u0027, \u0027notable\u0027, \u0027failure\u0027, \u0027including\u0027, \u0027airway\u0027, \u0027possible\u0027, \u0027corrected\u0027, \u0027except\u0027, \u0027otherwise\u0027, \u0027except\u0027, \u0027like\u0027, \u0027lower\u0027, \u0027cadaveric\u0027, \u0027three\u0027, \u0027avoid\u0027, \u0027color\u0027, \u0027medical\u0027, \u0027else\u0027, \u0027bright\u0027, \u0027week\u0027, \u0027associated\u0027, \u0027occasional\u0027, \u0027diagnosis\u0027, \u0027similar\u0027, \u0027taken\u0027, \u0027complicated\u0027, \u0027rehab\u0027, \u0027work\u0027, \u0027surgery\u0027, \u0027repair\u0027, \u0027upper\u0027, \u0027notably\u0027, \u0027relatives\u0027, \u0027small\u0027]\n\nmore_common_diagnosis \u003d[\u0027of\u0027, \u0027other\u0027, \u0027and\u0027, \u0027or\u0027, \u0027diagnostic\u0027, \u0027total\u0027, \u0027without\u0027, \u0027with\u0027, \u0027closed\u0027,  \u0027on\u0027, \u0027unspecified\u0027, \u0027partial\u0027, \u0027reduction\u0027, \u0027site\u0027, \u0027specified\u0027, \u0027unknown\u0027, \u0027wall\u0027, \u0027growth\u0027, \u0027correction\u0027,\u0027insertion\u0027,\u0027closure\u0027, \u0027peripheral\u0027, \u0027not\u0027, \u0027radius\u0027, \u0027otherwise\u0027, \u0027except\u0027, \u0027part\u0027, \u0027repair\u0027] \n\nregular_expressions \u003d [\u0027[0-9]+\u0027, \u0027\"\u0027, \u0027\\\u0027\u0027, \u0027\\.\u0027, \u0027,\u0027, \u0027/\u0027, \u0027-\u0027, \u0027:\u0027, \u0027\\(\u0027, \u0027\\)\u0027,  \u0027%\u0027, \u0027#\u0027, \u0027\\*\u0027, \u0027\\n\u0027, \u0027\\[\u0027, \u0027\\]\u0027, \u0027 +\u0027]",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349820956_-1647034525",
      "id": "20180930-202340_440558839",
      "dateCreated": "Sep 30, 2018 8:23:40 PM",
      "dateStarted": "Oct 26, 2018 5:43:01 PM",
      "dateFinished": "Oct 26, 2018 5:43:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Pré-processamento do texto\n\ndef filter_words(text):\n\n    for exp in regular_expressions:\n        text \u003d re.sub(exp, \u0027 \u0027, text)\n\n    words_array \u003d text.split(\u0027 \u0027)\n    final_array \u003d []\n    \n    for word in words_array:\n        \n        if len(word) \u003e 3 and word not in stop_words and word not in more_common:\n            final_array.append(word)\n\n    return final_array",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349829796_-667063752",
      "id": "20180930-202349_1180519443",
      "dateCreated": "Sep 30, 2018 8:23:49 PM",
      "dateStarted": "Oct 26, 2018 5:43:14 PM",
      "dateFinished": "Oct 26, 2018 5:43:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Cria um vetor para a lista de palavras\n\ndef wordsToVector(array):\n    sem_embbeding \u003d com_embbeding \u003d 0\n    list \u003d []\n    t \u003d []\n    for word in array:\n        if len(word) \u003e 3 and word not in more_common_diagnosis:\n            try:\n                x \u003d model[word]\n                list.append(word)\n                com_embbeding \u003d com_embbeding + 1\n            except:\n                print(word, array)\n                sem_embbeding \u003d sem_embbeding + 1\n\n    if(len(list) \u003e 0):\n        m\u003dmodel[list[0]]\n        t \u003d m - m\n        for m in list:\n            t \u003d t + model[m]\n        t \u003d t /len(list)\n        \n    encontrados \u003d 100 * com_embbeding / (com_embbeding + sem_embbeding)\n    print(\u0027Encontrados\u0027, encontrados, \u0027%\u0027)\n    if encontrados \u003e 70:\n        return t\n    else:\n        return []",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349842820_1532961107",
      "id": "20180930-202402_612140549",
      "dateCreated": "Sep 30, 2018 8:24:02 PM",
      "dateStarted": "Oct 26, 2018 5:43:23 PM",
      "dateFinished": "Oct 26, 2018 5:43:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Construção de um dicionário de doenças com seus respectivos vetores.\n\nwith open(\u0027diagnoses2.csv\u0027) as csvfile:\n    readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\n    dictionary \u003d {}\n    diagnoses \u003d []\n    for row in readCSV:\n        text \u003d row[2].lower()\n        \n        for exp in regular_expressions:\n            text \u003d re.sub(exp, \u0027 \u0027, text)\n            \n        words_array \u003d text.split()  \n\n        if len(words_array) \u003e 0:\n            \n            num \u003d row[0]\n            num \u003d re.sub(\u0027E\u0027, \u002732\u0027, num)\n            num \u003d re.sub(\u0027V\u0027, \u002786\u0027, num)\n            \n            dictionary.update({num: words_array})\n            diagnoses.append(num)",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349851468_-1892843100",
      "id": "20180930-202411_998505587",
      "dateCreated": "Sep 30, 2018 8:24:11 PM",
      "dateStarted": "Oct 26, 2018 5:43:26 PM",
      "dateFinished": "Oct 26, 2018 5:43:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Construção de um dicionário dos pacientes e as respectivas doenças no período de teste.\n\nwith open(\u0027test_data_20181006.csv\u0027) as csvfile:\n    readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\n    \n    dic_admissions \u003d {}\n    admissions \u003d []\n\n    for row in readCSV:\n        paciente \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[1])\n        doenca \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[2])\n        \n        if paciente not in admissions:\n            admissions.append(paciente)\n            vector \u003d []\n            vector.append(doenca)\n            dic_admissions.update({paciente: vector})\n        else:\n            vector \u003d dic_admissions.get(paciente)\n            vector.append(doenca)\n            dic_admissions.update({paciente: vector})",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349860220_-1918454355",
      "id": "20180930-202420_1284164623",
      "dateCreated": "Sep 30, 2018 8:24:20 PM",
      "dateStarted": "Oct 26, 2018 5:43:29 PM",
      "dateFinished": "Oct 26, 2018 5:43:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "spark_topks \u003d pd.read_csv(\u0027recsys-2017-tutorial/alpenglow_topks_mimic.csv\u0027)\nspark_topks",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 6:08:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "       user  item  rank\n0       406  4019     1\n1       406  2724     2\n2       406  5849     3\n3       406  2762     4\n4       406   496     5\n5       406  5119     6\n6       406  4240     7\n7       406  5845     8\n8       406  9971     9\n9       406  4241    10\n10      406  4254    11\n11      406  5185    12\n12      406  2749    13\n13      406  4439    14\n14      406  3572    15\n15      406   570    16\n16      406  7907    17\n17      406  5712    18\n18      406  5789    19\n19      406  5722    20\n20      406  2763    21\n21      406  4139    22\n22      406  5363    23\n23      406  3484    24\n24      406  5533    25\n25      406  2764    26\n26      406  5121    27\n27      406  7850    28\n28      406  5781    29\n29      406  9974    30\n...     ...   ...   ...\n1874  96686  5119     4\n1875  96686  2761     5\n1876  96686  5845     6\n1877  96686  2749     7\n1878  96686  4241     8\n1879  96686  9971     9\n1880  96686  5185    10\n1881  96686  4439    11\n1882  96686  4254    12\n1883  96686  5789    13\n1884  96686   570    14\n1885  96686  7907    15\n1886  96686  4139    16\n1887  96686  3484    17\n1888  96686  2763    18\n1889  96686  5363    19\n1890  96686  5121    20\n1891  96686  2764    21\n1892  96686  9982    22\n1893  96686  5533    23\n1894  96686  3485    24\n1895  96686  5722    25\n1896  96686  5712    26\n1897  96686  9974    27\n1898  96686  7850    28\n1899  96686  5781    29\n1900  96686  3320    30\n1901  96686  4414    31\n1902  96686   430    32\n1903  96686  7895    33\n\n[1904 rows x 3 columns]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538349947995_2092491632",
      "id": "20180930-202547_753105977",
      "dateCreated": "Sep 30, 2018 8:25:47 PM",
      "dateStarted": "Oct 26, 2018 6:08:02 PM",
      "dateFinished": "Oct 26, 2018 6:08:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "    \nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom alpenglow.offline.evaluation import NdcgScore\n\ntrain_batch \u003d pd.read_csv(\u0027train_batch.csv\u0027, header\u003dNone, names\u003d[\u0027time\u0027,\u0027user\u0027,\u0027item\u0027])\ntest_batch \u003d pd.read_csv(\u0027test_batch.csv\u0027, header\u003dNone, names\u003d[\u0027time\u0027,\u0027user\u0027,\u0027item\u0027])\ntest_relevant \u003d test_batch[test_batch.user.isin(train_batch.user)]\ntest_relevant[\u0027score\u0027]\u003d1",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 6:08:08 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538607942765_-102866119",
      "id": "20181003-200542_213991243",
      "dateCreated": "Oct 3, 2018 8:05:42 PM",
      "dateStarted": "Oct 26, 2018 6:08:09 PM",
      "dateFinished": "Oct 26, 2018 6:08:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Retorna as n palavras com embedding mais proximo\n\ndef match_words(words_text, words_diasease, number):\n    #print(\u0027match_words\u0027, words_text, words_diasease, number)\n\n    embeddings_disease \u003d []\n    tuple_list \u003d []\n    result \u003d 0\n    \n    for word_d in words_diasease:\n        try:\n            x \u003d model[word_d]\n            embeddings_disease.append(x)\n        except:\n            erro \u003d 1\n\n    for word_t in words_text:\n        try:\n            embedding \u003d model[word_t]\n            tamanho \u003d  len(embeddings_disease)\n            for i in range(0, tamanho):\n                result \u003d result + 1 - spatial.distance.cosine(embedding, embeddings_disease[i])\n            tuple_list.append((word_t, result))\n                \n        except:\n            erro \u003d 1\n            \n    tuple_list \u003d sorted(tuple_list, key\u003dlambda x: x[1], reverse\u003dTrue)\n    print(tuple_list)\n    \n    value \u003d 0\n    for i in range (0, number):\n        value \u003d value + tuple_list[i][1]\n    #print(value)\n        \n    return value",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 6:08:19 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349864491_-617618323",
      "id": "20180930-202424_1380493559",
      "dateCreated": "Sep 30, 2018 8:24:24 PM",
      "dateStarted": "Oct 26, 2018 6:08:20 PM",
      "dateFinished": "Oct 26, 2018 6:08:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Construção de um dicionário dos pacientes e as respectivas doenças recomendadas.\n\ndef top_recomended_ALS(number):\n    #print(\u0027top_recomended_ALS\u0027, number)\n\n    dic_recommend \u003d {}\n    recomend \u003d []\n    \n    max \u003d len(spark_topks) - 1\n    for i in range(0, max):\n        user \u003d int(spark_topks.iloc[i][\u0027user\u0027])\n        item \u003d int(spark_topks.iloc[i][\u0027item\u0027])\n        rank \u003d int(spark_topks.iloc[i][\u0027rank\u0027])\n        if rank \u003c\u003d number:\n            #print(user)\n            if user not in recomend:\n                recomend.append(user)\n                vector \u003d []\n                vector.append(str(int(item)))\n                dic_recommend.update({str(int(user)): vector})\n            else:\n                vector \u003d dic_recommend.get(str(int(user)))\n                vector.append(str(int(item)))\n                dic_recommend.update({str(int(user)): vector})\n    return dic_recommend",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 6:08:23 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538378042495_-1641387227",
      "id": "20181001-041402_1601817848",
      "dateCreated": "Oct 1, 2018 4:14:02 AM",
      "dateStarted": "Oct 26, 2018 6:08:36 PM",
      "dateFinished": "Oct 26, 2018 6:08:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Compara palavra por palavra e retorna as 5 doenças mais similares\r\n\r\ndef list_most_similar(words_text, paciente, num_words, num_w2v):\r\n    #print(\u0027list_most_similar\u0027, paciente, num_words, num_w2v)\r\n    \r\n    list \u003d []\r\n    most_similar \u003d []\r\n    d \u003d dictionary\r\n    recomendações \u003d dic_recommend.get(paciente)\r\n\r\n    if recomendações is not None:\r\n        for k, v in d.items():\r\n            if k in recomendações:\r\n                try:\r\n                    value \u003d match_words(words_text, v, num_words)\r\n                    tupla \u003d (k, value)\r\n                    list.append(tupla)\r\n                except:\r\n                    erro \u003d 1\r\n        \r\n        if(len(list) \u003e 0):\r\n            list \u003d sorted(list, key\u003dlambda x: x[1], reverse\u003dTrue)\r\n            for i in range (0, num_w2v):\r\n                if(len(list) \u003e num_w2v):\r\n                    most_similar.append(list[i][0])\r\n    \r\n    return most_similar",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349878907_862156595",
      "id": "20180930-202438_1677233108",
      "dateCreated": "Sep 30, 2018 8:24:38 PM",
      "dateStarted": "Oct 26, 2018 5:44:28 PM",
      "dateFinished": "Oct 26, 2018 5:44:29 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def create_dataframe(user, itens):\n\n    max \u003d len(itens)\n    users \u003d []\n    ranks \u003d [] \n    \n    for i in range(0, max):\n        users.append(int(user))\n        ranks.append(i + 1)\n        itens[i] \u003d int(itens[i])\n                \n                \n    d \u003d {\n        \u0027user\u0027 : pd.Series(users, index\u003d[*(range(0, max))] ),\n        \u0027item\u0027 : pd.Series(itens, index\u003d[*(range(0, max))] ),\n        \u0027rank\u0027 : pd.Series(ranks, index\u003d[*(range(0, max))] )\n    }\n    \n    dataframe \u003d pd.DataFrame(d)\n    #print(dataframe)\n    \n    return dataframe",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538838398713_-1248040724",
      "id": "20181006-120638_670888399",
      "dateCreated": "Oct 6, 2018 12:06:38 PM",
      "dateStarted": "Oct 26, 2018 5:44:31 PM",
      "dateFinished": "Oct 26, 2018 5:44:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1539120037842_17247155",
      "id": "20181009-182037_1347032835",
      "dateCreated": "Oct 9, 2018 6:20:37 PM",
      "dateStarted": "Oct 26, 2018 7:39:40 AM",
      "dateFinished": "Oct 26, 2018 7:39:40 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Teste da técnica de Word Embeddings\r\n\r\npresent \u003d [\u0027History of Present Illness:\\n(.+\\n)+\u0027]\r\npast \u003d [\u0027Past Medical History:\\n(.+\\n\\n?)+\u0027]\r\n\r\nfile \u003d open(\"resultados_alpenglow_wiki_1025.csv\", \"w\")\r\n\r\nnum_ALS \u003d [5]#[1, 2, 3, 4, 5, 6, 7, 8]#, 9, 10]#, 20\r\nnum_Word2Vec \u003d [5]# [1, 2, 3, 4, 5, 6, 7, 8]#, 9, 10]\r\n#num_Word2Vec \u003d [5]\r\nfor als in num_ALS:\r\n    #als \u003d 50\r\n    dic_recommend \u003d top_recomended_ALS(als)\r\n    \r\n    for w2v in num_Word2Vec:\r\n        for num_words in range(1, 11):\r\n            \r\n            if als \u003e\u003d w2v:\r\n            \r\n                i \u003d tp \u003d fp \u003d fn \u003d 0\r\n                data_old \u003d paciente_old \u003d 0\r\n                tam \u003d scores \u003d 0\r\n                \r\n                dataframe \u003d pd.DataFrame(columns\u003d[\u0027user\u0027,\u0027item\u0027,\u0027rank\u0027])\r\n                \r\n                with open(\u0027test_data_20181006.csv\u0027) as csvfile:\r\n                    readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\r\n                \r\n                    for row in readCSV:\r\n        \r\n                        data \u003d row[0]\r\n                        paciente \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[1])\r\n                        doenca \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[2])\r\n                        \r\n                        if data !\u003d data_old or paciente !\u003d paciente_old:\r\n                \r\n                            data_old \u003d data\r\n                            paciente_old \u003d paciente\r\n        \r\n                            list \u003d dic_admissions.get(paciente)\r\n                \r\n                            if list is not None:\r\n                                valido \u003d False\r\n                                for x in list:\r\n                                    if x in diagnoses:\r\n                                        valido \u003d True\r\n                                        \r\n                                if valido \u003d\u003d True:\r\n                                    \r\n                                    if als \u003e w2v:\r\n                                \r\n                                        only_present \u003d row[3]\r\n                                        words_text \u003d filter_words(only_present.lower())\r\n                                        diseases1 \u003d list_most_similar(words_text, paciente, num_words, w2v)\r\n                                        \r\n                                        if diseases1 !\u003d []:\r\n                                            pos \u003d 0\r\n                                            for d in diseases1:\r\n                                                if (d in list):\r\n                                                    tp \u003d tp + 1\r\n                                                    pos \u003d pos + 1\r\n                                                else:\r\n                                                    fp \u003d fp + 1\r\n            \r\n                                            fn \u003d fn + (len(list) - pos) #menor(len(list) - pos, w2v)\r\n                                            \r\n                                            precision \u003d round(100 * tp / (tp + fp), 2)\r\n                                            recall \u003d round(100 * tp / (tp + fn), 2)\r\n                                            \r\n                                            df \u003d create_dataframe(paciente, diseases1)\r\n    \r\n                                            frames \u003d [dataframe, df]\r\n                                            dataframe \u003d pd.concat(frames)\r\n                                            tam \u003d tam + 1\r\n                                    else:\r\n                                        \r\n                                        d \u003d dictionary\r\n                                        diseases1 \u003d dic_recommend.get(str(int(paciente)))\r\n                                        \r\n                                        if diseases1 is not None:\r\n                                            pos \u003d 0\r\n    \r\n                                            for d in diseases1:\r\n                                                if (d in list):\r\n                                                    tp \u003d tp + 1\r\n                                                    pos \u003d pos + 1\r\n                                                else:\r\n                                                    fp \u003d fp + 1\r\n            \r\n                                            fn \u003d fn + (len(list) - pos) #menor(len(list) - pos, w2v)\r\n                                            \r\n                                            precision \u003d round(100 * tp / (tp + fp), 2)\r\n                                            recall \u003d round(100 * tp / (tp + fn), 2)\r\n                                            \r\n                                            df \u003d create_dataframe(paciente, diseases1)\r\n                                            frames \u003d [dataframe, df]\r\n                                            dataframe \u003d pd.concat(frames)\r\n    \r\n                                            tam \u003d tam + 1\r\n                                            #scores \u003d scores + NdcgScore(test_relevant, dataframe)\r\n                    \r\n                    dataframe \u003d ordena_dataframe(df)\r\n                    score_list \u003d [NdcgScore(test_relevant, topks) for topks in [dataframe]]\r\n                    #NdcgScore(test_relevant, dataframe)\r\n                    ndcg \u003d score_list[0]\r\n                    \r\n                    print(\u0027Words:\u0027, num_words, \u0027ALS:\u0027, als, \u0027Word2Vec\u0027, w2v )\r\n                    print(\u0027Precision:\u0027, precision, \u0027%\u0027, \u0027Recall:\u0027, recall, \u0027Ndcg:\u0027, ndcg, \u0027 - \u0027, tp, \u0027/\u0027, fp, \u0027/\u0027, fn, ndcg, tam)\r\n                    file.write(\u0027\u0027 + str(num_words) + \u0027, \u0027 + str(als) + \u0027, \u0027 + str(w2v)  + \u0027, \u0027 + str(precision) + \u0027, \u0027 + str(recall)  + \u0027, \u0027 + str(ndcg)  +\u0027\\n\u0027)\r\n\r\nfile.close()\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 6:08:28 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Words: 1 ALS: 5 Word2Vec 5\nPrecision: 7.41 % Recall: 12.9 Ndcg: 0.0  -  20 / 250 / 135 0.0 54\nWords: 2 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 3 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 4 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 5 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 6 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 7 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 8 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 9 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\nWords: 10 ALS: 5 Word2Vec 5\nPrecision: 0.0 % Recall: 0.0 Ndcg: 0.0  -  0 / 270 / 155 0.0 54\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538349890899_-402897789",
      "id": "20180930-202450_612497491",
      "dateCreated": "Sep 30, 2018 8:24:50 PM",
      "dateStarted": "Oct 26, 2018 6:08:36 PM",
      "dateFinished": "Oct 26, 2018 6:08:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "user \u003d 7666.0\nitens \u003d [5849, 412]\n\nmax \u003d len(itens)\nusers \u003d []\nranks \u003d [] \n\nfor i in range(0, max):\n    users.append(int(user))\n    ranks.append(i + 1)\n    itens[i] \u003d int(itens[i])\n        \nd \u003d {\n    \u0027user\u0027 : pd.Series(users, index\u003d[*(range(0, max))] ),\n    \u0027item\u0027 : pd.Series(itens, index\u003d[*(range(0, max))] ),\n    \u0027rank\u0027 : pd.Series(ranks, index\u003d[*(range(0, max))] )\n}\n\ndataframe \u003d pd.DataFrame(d)\nprint(dataframe)\nscores \u003d NdcgScore(test_relevant, dataframe)\n#scores \u003d [NdcgScore(test_relevant, topks) for topks in dataframe]\nngcg \u003d scores\nprint(ngcg)",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "   item  rank  user\n0  5849     1  7666\n1   412     2  7666\n0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538848299949_1266482841",
      "id": "20181006-145139_1554746155",
      "dateCreated": "Oct 6, 2018 2:51:39 PM",
      "dateStarted": "Oct 26, 2018 5:44:39 PM",
      "dateFinished": "Oct 26, 2018 5:44:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Retorna as n palavras com embedding mais proximo\n\ndef match_words(words_text, words_diasease, number):\n    #print(\u0027hellooooooooo match_words\u0027)\n\n    embeddings_disease \u003d []\n    total_embeddings_disease \u003d []\n    tuple_list \u003d []\n    seletioned_words \u003d []\n    #seletioned_embedding \u003d []\n    \n    for word_d in words_diasease:\n        try:\n            x \u003d model[word_d]\n            embeddings_disease.append(x)\n            if total_embeddings_disease \u003d\u003d []:\n                total_embeddings_disease \u003d x\n            else:\n                total_embeddings_disease \u003d total_embeddings_disease + x\n        except:\n            erro \u003d 1\n\n    for word_t in words_text:\n        try:\n            embedding \u003d model[word_t]\n            tamanho \u003d  len(embeddings_disease)\n            for i in range(0, tamanho):\n                result \u003d 1 - spatial.distance.cosine(embedding, embeddings_disease[i])\n                tuple_list.append((word_t, result))\n                \n        except:\n            erro \u003d 1\n            \n    tuple_list \u003d sorted(tuple_list, key\u003dlambda x: x[1], reverse\u003dTrue)\n    value \u003d tuple_list[0][1]\n    #print(value)\n    seletioned_words.append(tuple_list[0][0])\n    #print(seletioned_words)\n    words_text.remove(tuple_list[0][0])\n    #print(words_text )\n    seletioned_embedding \u003d model[tuple_list[0][0]]\n    #print(seletioned_embedding)\n   \n\n    for i in range (1, number):\n        print(\u0027inicio\u0027)\n        tuple_list \u003d []\n        for word_t in words_text:\n            #try:\n            embedding \u003d model[word_t]\n            seletioned_embedding \u003d seletioned_embedding + embedding\n            #print(\u0027seletioned_embedding\u0027, len(seletioned_embedding), len(total_embeddings_disease))\n            \n            result \u003d 1 - spatial.distance.cosine(seletioned_embedding, total_embeddings_disease)\n            tuple_list.append((word_t, result))\n                \n            #except:\n            #    erro \u003d 1\n            #    print(\u0027mudinho\u0027)\n                    \n        tuple_list \u003d sorted(tuple_list, key\u003dlambda x: x[1], reverse\u003dTrue)\n        \n        value \u003d value +  tuple_list[0][1]\n        print(tuple_list, number, i, value)\n        seletioned_words.append(tuple_list[0][0])\n        print(seletioned_words)\n        words_text.remove(tuple_list[0][0])\n        #seletioned_embedding \u003d seletioned_embedding + tuple_list[0][0]\n        print(\u0027fim\u0027)\n            \n   \n    #print(value)\n    \n    return value",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1540461944379_-2075301756",
      "id": "20181025-070544_1148834499",
      "dateCreated": "Oct 25, 2018 7:05:44 AM",
      "dateStarted": "Oct 26, 2018 5:44:49 PM",
      "dateFinished": "Oct 26, 2018 5:44:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Retorna as n palavras com embedding mais proximo\n\ndef match_words(words_text, words_diasease, number):\n    #print(\u0027match_words\u0027, words_text, words_diasease, number)\n\n    embeddings_disease \u003d []\n    tuple_list \u003d []\n    result \u003d 0\n    \n    for word_d in words_diasease:\n        try:\n            x \u003d model[word_d]\n            embeddings_disease.append(x)\n        except:\n            erro \u003d 1\n\n    for i in range(0, len(words_text)-number):\n        try:\n            for j in range(0, number):\n                word_t \u003d words_text[i + j]\n                embedding \u003d model[word_t]\n                tamanho \u003d  len(embeddings_disease)\n                for i in range(0, tamanho):\n                    result \u003d result + 1 - spatial.distance.cosine(embedding, embeddings_disease[i])\n            tuple_list.append((word_t, result))\n                \n        except:\n            erro \u003d 1\n            \n    tuple_list \u003d sorted(tuple_list, key\u003dlambda x: x[1], reverse\u003dTrue)\n    print(tuple_list)\n    \n    value \u003d 0\n    for i in range (0, number):\n        value \u003d value + tuple_list[i][1]\n    #print(value)\n        \n    return value",
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1540463065664_-676194412",
      "id": "20181025-072425_1852480859",
      "dateCreated": "Oct 25, 2018 7:24:25 AM",
      "dateStarted": "Oct 26, 2018 5:44:50 PM",
      "dateFinished": "Oct 26, 2018 5:44:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "dateUpdated": "Oct 26, 2018 5:24:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1540497696822_1777604607",
      "id": "20181025-170136_1118291502",
      "dateCreated": "Oct 25, 2018 5:01:36 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "06. Spark + Word2Vec",
  "id": "2DRQY2DN1",
  "angularObjects": {
    "2DFFMJW2D:shared_process": [],
    "2DE4C8UXA:shared_process": [],
    "2DFNF7F86:shared_process": [],
    "2DDMFQ4NT:shared_process": [],
    "2DF4JHTJS:shared_process": [],
    "2DGTDKVBY:shared_process": [],
    "2DDX1FHE4:shared_process": [],
    "2DGBVAR63:shared_process": [],
    "2DE1HTE4B:shared_process": [],
    "2DFUMJA2M:shared_process": [],
    "2DF3EN9Y8:shared_process": [],
    "2DFG8QFKG:shared_process": [],
    "2DE19T4UN:shared_process": [],
    "2DDZ2CZF6:shared_process": [],
    "2DGYH4B9E:shared_process": [],
    "2DEG6W7VR:shared_process": [],
    "2DFPD3S3G:shared_process": [],
    "2DHACHYJ3:shared_process": [],
    "2DDRJAE6Z:shared_process": []
  },
  "config": {},
  "info": {}
}