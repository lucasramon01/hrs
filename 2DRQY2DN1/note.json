{
  "paragraphs": [
    {
      "text": "# Importação das bibliotecas\n\nfrom nltk.corpus import stopwords\nfrom gensim.models.word2vec import Word2Vec\nfrom gensim.models.keyedvectors import KeyedVectors\nfrom scipy import spatial\nimport gensim.downloader as api\nimport pandas as pd\nimport re\nimport csv",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:40:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538348286499_1488857311",
      "id": "20180930-195806_2005730821",
      "dateCreated": "Sep 30, 2018 7:58:06 PM",
      "dateStarted": "Oct 6, 2018 6:40:30 PM",
      "dateFinished": "Oct 6, 2018 6:40:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "model \u003d KeyedVectors.load_word2vec_format(\u0027embeddings/wiki.en.vec.bin\u0027, binary\u003dTrue)",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:40:32 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349815940_-774054595",
      "id": "20180930-202335_2077469486",
      "dateCreated": "Sep 30, 2018 8:23:35 PM",
      "dateStarted": "Oct 6, 2018 6:40:33 PM",
      "dateFinished": "Oct 6, 2018 6:48:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Vetores de palavras e expressões regulares a serem retiradas do texto\n\nstop_words \u003d set(stopwords.words(\u0027english\u0027))\n\nmore_common \u003d [\u0027with\u0027, \u0027history\u0027, \u0027patient\u0027, \u0027pain\u0027, \u0027present\u0027, \u0027hospital\u0027, \u0027illness\u0027, \u0027that\u0027, \u0027from\u0027, \u0027this\u0027, \u0027denies\u0027, \u0027chest\u0027, \u0027last\u0027, \u0027which\u0027, \u0027were\u0027, \u0027given\u0027, \u0027name\u0027, \u0027year\u0027, \u0027have\u0027, \u0027been\u0027, \u0027also\u0027, \u0027showed\u0027, \u0027transferred\u0027, \u0027found\u0027, \u0027after\u0027, \u0027prior\u0027, \u0027started\u0027, \u0027days\u0027, \u0027known\u0027, \u0027left\u0027, \u0027admitted\u0027, \u0027then\u0027, \u0027recent\u0027, \u0027noted\u0027, \u0027presented\u0027, \u0027right\u0027, \u0027abdominal\u0027, \u0027time\u0027, \u0027admission\u0027, \u0027reports\u0027, \u0027over\u0027, \u0027well\u0027, \u0027received\u0027, \u0027cough\u0027, \u0027negative\u0027, \u0027past\u0027, \u0027presents\u0027, \u0027lastname\u0027, \u0027further\u0027, \u0027home\u0027, \u0027chills\u0027, \u0027placed\u0027, \u0027male\u0027, \u0027when\u0027, \u0027shortness\u0027, \u0027since\u0027, \u0027disease\u0027, \u0027symptoms\u0027, \u0027diarrhea\u0027, \u0027today\u0027, \u0027recently\u0027, \u0027female\u0027, \u0027initial\u0027, \u0027dyspnea\u0027, \u0027baseline\u0027, \u0027revealed\u0027, \u0027transfer\u0027, \u0027arrival\u0027, \u0027severe\u0027, \u0027felt\u0027, \u0027developed\u0027, \u0027increased\u0027, \u0027back\u0027, \u0027evaluation\u0027, \u0027acute\u0027, \u0027some\u0027, \u0027night\u0027, \u0027during\u0027, \u0027there\u0027, \u0027micu\u0027, \u0027initially\u0027, \u0027without\u0027, \u0027states\u0027, \u0027only\u0027, \u0027treated\u0027, \u0027changes\u0027, \u0027worsening\u0027, \u0027significant\u0027, \u0027note\u0027, \u0027admission\u0027, \u0027birth\u0027, \u0027first\u0027,  \u0027name\u0027, \u0027last\u0027, \u0027completed\u0027, \u0027phone\u0027, \u0027date\u0027, \u0027years\u0027, \u0027old\u0027, \u0027others\u0027, \u0027other\u0027, \u0027day\u0027, \u0027days\u0027, \u0027month\u0027, \u0027months\u0027, \u0027night\u0027, \u0027change\u0027, \u0027upon\u0027, \u0027cath\u0027, \u0027addition\u0027, \u0027progressive\u0027, \u0027multiple\u0027, \u0027location\u0027, \u0027fixed\u0027, \u0027going\u0027, \u0027increasing\u0027, \u0027less\u0027, \u0027nothing\u0027, \u0027hours\u0027, \u0027normal\u0027, \u0027currently\u0027, \u0027exacerbated\u0027, \u0027location\u0027, \u0027fixed\u0027, \u0027going\u0027, \u0027increasing\u0027, \u0027jaundice\u0027, \u0027unknown\u0027, \u0027onset\u0027, \u0027shortly\u0027, \u0027diag\u0027, \u0027several\u0027, \u0027notable\u0027, \u0027failure\u0027, \u0027including\u0027, \u0027airway\u0027, \u0027possible\u0027, \u0027corrected\u0027, \u0027except\u0027, \u0027otherwise\u0027, \u0027except\u0027, \u0027like\u0027, \u0027lower\u0027, \u0027cadaveric\u0027, \u0027three\u0027, \u0027avoid\u0027, \u0027color\u0027, \u0027medical\u0027, \u0027else\u0027, \u0027bright\u0027, \u0027week\u0027, \u0027associated\u0027, \u0027occasional\u0027, \u0027diagnosis\u0027, \u0027similar\u0027, \u0027taken\u0027, \u0027complicated\u0027, \u0027rehab\u0027, \u0027work\u0027, \u0027surgery\u0027, \u0027repair\u0027, \u0027upper\u0027, \u0027notably\u0027, \u0027relatives\u0027, \u0027small\u0027]\n\nmore_common_diagnosis \u003d[\u0027of\u0027, \u0027other\u0027, \u0027and\u0027, \u0027or\u0027, \u0027diagnostic\u0027, \u0027total\u0027, \u0027without\u0027, \u0027with\u0027, \u0027closed\u0027,  \u0027on\u0027, \u0027unspecified\u0027, \u0027partial\u0027, \u0027reduction\u0027, \u0027site\u0027, \u0027specified\u0027, \u0027unknown\u0027, \u0027wall\u0027, \u0027growth\u0027, \u0027correction\u0027,\u0027insertion\u0027,\u0027closure\u0027, \u0027peripheral\u0027, \u0027not\u0027, \u0027radius\u0027, \u0027otherwise\u0027, \u0027except\u0027, \u0027part\u0027, \u0027repair\u0027] \n\nregular_expressions \u003d [\u0027[0-9]+\u0027, \u0027\"\u0027, \u0027\\\u0027\u0027, \u0027\\.\u0027, \u0027,\u0027, \u0027/\u0027, \u0027-\u0027, \u0027:\u0027, \u0027\\(\u0027, \u0027\\)\u0027,  \u0027%\u0027, \u0027#\u0027, \u0027\\*\u0027, \u0027\\n\u0027, \u0027\\[\u0027, \u0027\\]\u0027, \u0027 +\u0027]",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:40:35 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349820956_-1647034525",
      "id": "20180930-202340_440558839",
      "dateCreated": "Sep 30, 2018 8:23:40 PM",
      "dateStarted": "Oct 6, 2018 6:40:46 PM",
      "dateFinished": "Oct 6, 2018 6:48:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Pré-processamento do texto\n\ndef filter_words(text):\n\n    for exp in regular_expressions:\n        text \u003d re.sub(exp, \u0027 \u0027, text)\n\n    words_array \u003d text.split(\u0027 \u0027)\n    final_array \u003d []\n    \n    for word in words_array:\n        \n        if len(word) \u003e 3 and word not in stop_words and word not in more_common:\n            final_array.append(word)\n\n    return final_array",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:40:37 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349829796_-667063752",
      "id": "20180930-202349_1180519443",
      "dateCreated": "Sep 30, 2018 8:23:49 PM",
      "dateStarted": "Oct 6, 2018 6:48:30 PM",
      "dateFinished": "Oct 6, 2018 6:48:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Cria um vetor para a lista de palavras\n\ndef wordsToVector(array):\n    sem_embbeding \u003d com_embbeding \u003d 0\n    list \u003d []\n    t \u003d []\n    for word in array:\n        if len(word) \u003e 3 and word not in more_common_diagnosis:\n            try:\n                x \u003d model[word]\n                list.append(word)\n                com_embbeding \u003d com_embbeding + 1\n            except:\n                print(word, array)\n                sem_embbeding \u003d sem_embbeding + 1\n\n    if(len(list) \u003e 0):\n        m\u003dmodel[list[0]]\n        t \u003d m - m\n        for m in list:\n            t \u003d t + model[m]\n        t \u003d t /len(list)\n        \n    encontrados \u003d 100 * com_embbeding / (com_embbeding + sem_embbeding)\n    print(\u0027Encontrados\u0027, encontrados, \u0027%\u0027)\n    if encontrados \u003e 70:\n        return t\n    else:\n        return []",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:40:41 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349842820_1532961107",
      "id": "20180930-202402_612140549",
      "dateCreated": "Sep 30, 2018 8:24:02 PM",
      "dateStarted": "Oct 6, 2018 6:48:35 PM",
      "dateFinished": "Oct 6, 2018 6:48:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Construção de um dicionário de doenças com seus respectivos vetores.\n\nwith open(\u0027diagnoses2.csv\u0027) as csvfile:\n    readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\n    dictionary \u003d {}\n    diagnoses \u003d []\n    for row in readCSV:\n        text \u003d row[2].lower()\n        \n        for exp in regular_expressions:\n            text \u003d re.sub(exp, \u0027 \u0027, text)\n            \n        words_array \u003d text.split()\n\n        if len(words_array) \u003e 0:\n            \n            num \u003d row[0]\n            num \u003d re.sub(\u0027E\u0027, \u002732\u0027, num)\n            num \u003d re.sub(\u0027V\u0027, \u002786\u0027, num)\n            \n            dictionary.update({num: words_array})\n            diagnoses.append(num)",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:40:44 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349851468_-1892843100",
      "id": "20180930-202411_998505587",
      "dateCreated": "Sep 30, 2018 8:24:11 PM",
      "dateStarted": "Oct 6, 2018 6:48:36 PM",
      "dateFinished": "Oct 6, 2018 6:48:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Construção de um dicionário dos pacientes e as respectivas doenças no período de teste.\n\nwith open(\u0027test_data_20181006.csv\u0027) as csvfile:\n    readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\n    \n    dic_admissions \u003d {}\n    admissions \u003d []\n\n    for row in readCSV:\n        paciente \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[1])\n        doenca \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[2])\n        \n        if paciente not in admissions:\n            admissions.append(paciente)\n            vector \u003d []\n            vector.append(doenca)\n            dic_admissions.update({paciente: vector})\n        else:\n            vector \u003d dic_admissions.get(paciente)\n            vector.append(doenca)\n            dic_admissions.update({paciente: vector})",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:55:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349860220_-1918454355",
      "id": "20180930-202420_1284164623",
      "dateCreated": "Sep 30, 2018 8:24:20 PM",
      "dateStarted": "Oct 6, 2018 6:55:22 PM",
      "dateFinished": "Oct 6, 2018 6:55:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "spark_topks \u003d pd.read_csv(\u0027recsys-2017-tutorial/spark_topks_mimic_80-20.csv\u0027)\nspark_topks",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:56:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "         user  item  rank\n0       406.0   311     1\n1       406.0   412     2\n2       406.0  2761     3\n3       406.0  5845     4\n4       406.0  3572     5\n5       406.0  2749     6\n6       406.0  5712     7\n7       406.0  2763     8\n8       406.0  4254     9\n9       406.0  4439    10\n10      406.0  7907    11\n11      406.0  5722    12\n12      406.0   570    13\n13      406.0  3320    14\n14      406.0  5533    15\n15      406.0  2764    16\n16      406.0  5363    17\n17      406.0  4139    18\n18      406.0  5781    19\n19      406.0  4241    20\n20      406.0  5849    21\n21      406.0  9982    22\n22      406.0  3485    23\n23      406.0  5789    24\n24      406.0  4240    25\n25      406.0  4019    26\n26      406.0   430    27\n27      406.0  2724    28\n28      406.0  7850    29\n29      406.0  9974    30\n...       ...   ...   ...\n1998  84465.0  4439    10\n1999  84465.0  5849    11\n2000  84465.0  2762    12\n2001  84465.0  5845    13\n2002  84465.0  3484    14\n2003  84465.0  9982    15\n2004  84465.0  5121    16\n2005  84465.0  7850    17\n2006  84465.0  5185    18\n2007  84465.0  4414    19\n2008  84465.0  5789    20\n2009  84465.0  5781    21\n2010  84465.0  3485    22\n2011  84465.0  5363    23\n2012  84465.0  2761    24\n2013  84465.0   430    25\n2014  84465.0  5533    26\n2015  84465.0  9974    27\n2016  84465.0  3320    28\n2017  84465.0  2763    29\n2018  84465.0   496    30\n2019  84465.0  2764    31\n2020  84465.0   570    32\n2021  84465.0  7907    33\n2022  84465.0  7895    34\n2023  84465.0  4254    35\n2024  84465.0  4240    36\n2025  84465.0  5722    37\n2026  84465.0  5712    38\n2027  84465.0  5119    39\n\n[2028 rows x 3 columns]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538349947995_2092491632",
      "id": "20180930-202547_753105977",
      "dateCreated": "Sep 30, 2018 8:25:47 PM",
      "dateStarted": "Oct 6, 2018 6:56:52 PM",
      "dateFinished": "Oct 6, 2018 6:56:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom alpenglow.offline.evaluation import NdcgScore\n\ntrain_batch \u003d pd.read_csv(\u0027train_batch.csv\u0027, header\u003dNone, names\u003d[\u0027time\u0027,\u0027user\u0027,\u0027item\u0027])\ntest_batch \u003d pd.read_csv(\u0027test_batch.csv\u0027, header\u003dNone, names\u003d[\u0027time\u0027,\u0027user\u0027,\u0027item\u0027])\ntest_relevant \u003d test_batch[test_batch.user.isin(train_batch.user)]\ntest_relevant[\u0027score\u0027]\u003d1",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:57:05 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538607942765_-102866119",
      "id": "20181003-200542_213991243",
      "dateCreated": "Oct 3, 2018 8:05:42 PM",
      "dateStarted": "Oct 6, 2018 6:57:06 PM",
      "dateFinished": "Oct 6, 2018 6:57:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Retorna as n palavras com embedding mais proximo\n\ndef match_words(words_text, words_diasease, number):\n    #print(\u0027match_words\u0027, words_text, words_diasease, number)\n\n    embeddings_disease \u003d []\n    tuple_list \u003d []\n    \n    for word_d in words_diasease:\n        try:\n            x \u003d model[word_d]\n            embeddings_disease.append(x)\n        except:\n            erro \u003d 1\n\n    for word_t in words_text:\n        try:\n            embedding \u003d model[word_t]\n            tamanho \u003d  len(embeddings_disease)\n            for i in range(0, tamanho):\n                result \u003d 1 - spatial.distance.cosine(embedding, embeddings_disease[i])\n                tuple_list.append((word_t, result))\n        except:\n            erro \u003d 1\n            \n    tuple_list \u003d sorted(tuple_list, key\u003dlambda x: x[1], reverse\u003dTrue)\n    \n    value \u003d 0\n    for i in range (0, number-1):\n        value \u003d value + tuple_list[i][1]\n        #print(tuple_list[i][0])\n        \n    return value",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:57:08 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349864491_-617618323",
      "id": "20180930-202424_1380493559",
      "dateCreated": "Sep 30, 2018 8:24:24 PM",
      "dateStarted": "Oct 6, 2018 6:57:08 PM",
      "dateFinished": "Oct 6, 2018 6:57:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Construção de um dicionário dos pacientes e as respectivas doenças recomendadas.\n\ndef top_recomended_ALS(number):\n    #print(\u0027top_recomended_ALS\u0027, number)\n\n    dic_recommend \u003d {}\n    recomend \u003d []\n    \n    max \u003d len(spark_topks) - 1\n    for i in range(0, max):\n        user \u003d int(spark_topks.iloc[i][\u0027user\u0027])\n        item \u003d int(spark_topks.iloc[i][\u0027item\u0027])\n        rank \u003d int(spark_topks.iloc[i][\u0027rank\u0027])\n        if rank \u003c\u003d number:\n            #print(user)\n            if user not in recomend:\n                recomend.append(user)\n                vector \u003d []\n                vector.append(str(int(item)))\n                dic_recommend.update({str(int(user)): vector})\n            else:\n                vector \u003d dic_recommend.get(str(int(user)))\n                vector.append(str(int(item)))\n                dic_recommend.update({str(int(user)): vector})\n    return dic_recommend",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:57:12 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538378042495_-1641387227",
      "id": "20181001-041402_1601817848",
      "dateCreated": "Oct 1, 2018 4:14:02 AM",
      "dateStarted": "Oct 6, 2018 6:57:12 PM",
      "dateFinished": "Oct 6, 2018 6:57:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Compara palavra por palavra e retorna as 5 doenças mais similares\r\n\r\ndef list_most_similar(words_text, paciente, num_words, num_w2v):\r\n    #print(\u0027list_most_similar\u0027, paciente, num_words, num_w2v)\r\n    \r\n    list \u003d []\r\n    most_similar \u003d []\r\n    d \u003d dictionary\r\n    recomendações \u003d dic_recommend.get(paciente)\r\n\r\n    if recomendações is not None:\r\n        for k, v in d.items():\r\n            if k in recomendações:\r\n                try:\r\n                    value \u003d match_words(words_text, v, num_words)\r\n                    tupla \u003d (k, value)\r\n                    list.append(tupla)\r\n                except:\r\n                    erro \u003d 1\r\n        \r\n        if(len(list) \u003e 0):\r\n            list \u003d sorted(list, key\u003dlambda x: x[1], reverse\u003dTrue)\r\n            for i in range (0, num_w2v):\r\n                if(len(list) \u003e num_w2v):\r\n                    most_similar.append(list[i][0])\r\n    \r\n    return most_similar",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:57:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538349878907_862156595",
      "id": "20180930-202438_1677233108",
      "dateCreated": "Sep 30, 2018 8:24:38 PM",
      "dateStarted": "Oct 6, 2018 6:57:16 PM",
      "dateFinished": "Oct 6, 2018 6:57:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def menor(num1, num2):\n    if num1 \u003c num2:\n        return num1\n    else:\n        return num2",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 6:57:21 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1538350347784_-1493371929",
      "id": "20180930-203227_592640464",
      "dateCreated": "Sep 30, 2018 8:32:27 PM",
      "dateStarted": "Oct 6, 2018 6:57:21 PM",
      "dateFinished": "Oct 6, 2018 6:57:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Teste da técnica de Word Embeddings\r\n\r\npresent \u003d [\u0027History of Present Illness:\\n(.+\\n)+\u0027]\r\npast \u003d [\u0027Past Medical History:\\n(.+\\n\\n?)+\u0027]\r\n\r\nfile \u003d open(\"resultados_wiki.csv\", \"w\")\r\n\r\nnum_ALS \u003d [1, 2, 3, 4, 5, 20, 30, 40, 50]\r\nnum_Word2Vec \u003d [1, 2, 3, 4, 5]\r\n\r\nfor als in num_ALS:\r\n#als \u003d 5\r\n    dic_recommend \u003d top_recomended_ALS(als)\r\n    \r\n    for w2v in num_Word2Vec:\r\n        for num_words in range(1, 6):\r\n            \r\n            if als \u003e\u003d w2v:\r\n            \r\n                i \u003d tp \u003d fp \u003d fn \u003d 0\r\n                data_old \u003d paciente_old \u003d 0\r\n                \r\n                with open(\u0027test_data_20181006.csv\u0027) as csvfile:\r\n                    readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\r\n                \r\n                    for row in readCSV:\r\n        \r\n                        data \u003d row[0]\r\n                        paciente \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[1])\r\n                        doenca \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[2])\r\n                        \r\n                        if data !\u003d data_old or paciente !\u003d paciente_old:\r\n                \r\n                            data_old \u003d data\r\n                            paciente_old \u003d paciente\r\n        \r\n                            list \u003d dic_admissions.get(paciente)\r\n                \r\n                            if list is not None:\r\n                                valido \u003d False\r\n                                for x in list:\r\n                                    if x in diagnoses:\r\n                                        valido \u003d True\r\n                                        \r\n                                if valido \u003d\u003d True:\r\n                                    \r\n                                    if als \u003e w2v:\r\n                                \r\n                                        only_present \u003d row[3]\r\n                                        words_text \u003d filter_words(only_present.lower())\r\n                                        diseases1 \u003d list_most_similar(words_text, paciente, num_words, w2v)\r\n                                        \r\n                                        if diseases1 !\u003d []:\r\n                                            pos \u003d 0\r\n                                            #print(diseases1)\r\n                                            for d in diseases1:\r\n                                                if (d in list):\r\n                                                    tp \u003d tp + 1\r\n                                                    pos \u003d pos + 1\r\n                                                else:\r\n                                                    fp \u003d fp + 1\r\n            \r\n                                            fn \u003d fn + (len(list) - pos) #menor(len(list) - pos, w2v)\r\n                                            \r\n                                            precision \u003d round(100 * tp / (tp + fp), 2)\r\n                                            recall \u003d round(100 * tp / (tp + fn), 2)\r\n                                    else:\r\n                                        \r\n                                        d \u003d dictionary\r\n                                        diseases1 \u003d dic_recommend.get(str(int(paciente)))\r\n                                        \r\n                                        if diseases1 is not None:\r\n                                            pos \u003d 0\r\n    \r\n                                            for d in diseases1:\r\n                                                if (d in list):\r\n                                                    tp \u003d tp + 1\r\n                                                    pos \u003d pos + 1\r\n                                                else:\r\n                                                    fp \u003d fp + 1\r\n            \r\n                                            fn \u003d fn + (len(list) - pos) #menor(len(list) - pos, w2v)\r\n                                            \r\n                                            precision \u003d round(100 * tp / (tp + fp), 2)\r\n                                            recall \u003d round(100 * tp / (tp + fn), 2)\r\n                                                \r\n    \r\n                    print(\u0027Words:\u0027, num_words, \u0027ALS:\u0027, als, \u0027Word2Vec\u0027, w2v )\r\n                    print(\u0027Precision:\u0027, precision, \u0027%\u0027, \u0027Recall:\u0027, recall,\u0027 - \u0027, tp, \u0027/\u0027, fp, \u0027/\u0027, fn)\r\n                    file.write(\u0027\u0027 + str(num_words) + \u0027, \u0027 + str(als) + \u0027, \u0027 + str(w2v)  + \u0027, \u0027 + str(precision) + \u0027, \u0027 + str(recall) +\u0027\\n\u0027)\r\n\r\nfile.close()\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 7:01:27 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Words: 1 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 2 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 3 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 4 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 5 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 1 ALS: 2 Word2Vec 1\nPrecision: 50.0 % Recall: 17.42  -  27 / 27 / 128\nWords: 2 ALS: 2 Word2Vec 1\nPrecision: 48.89 % Recall: 16.42  -  22 / 23 / 112\nWords: 3 ALS: 2 Word2Vec 1\nPrecision: 48.89 % Recall: 16.42  -  22 / 23 / 112\nWords: 4 ALS: 2 Word2Vec 1\nPrecision: 47.73 % Recall: 15.79  -  21 / 23 / 112\nWords: 5 ALS: 2 Word2Vec 1\nPrecision: 47.73 % Recall: 15.79  -  21 / 23 / 112\nWords: 1 ALS: 2 Word2Vec 2\nPrecision: 55.56 % Recall: 38.71  -  60 / 48 / 95\nWords: 2 ALS: 2 Word2Vec 2\nPrecision: 55.56 % Recall: 38.71  -  60 / 48 / 95\nWords: 3 ALS: 2 Word2Vec 2\nPrecision: 55.56 % Recall: 38.71  -  60 / 48 / 95\nWords: 4 ALS: 2 Word2Vec 2\nPrecision: 55.56 % Recall: 38.71  -  60 / 48 / 95\nWords: 5 ALS: 2 Word2Vec 2\nPrecision: 55.56 % Recall: 38.71  -  60 / 48 / 95\nWords: 1 ALS: 3 Word2Vec 1\nPrecision: 33.33 % Recall: 11.61  -  18 / 36 / 137\nWords: 2 ALS: 3 Word2Vec 1\nPrecision: 35.85 % Recall: 12.34  -  19 / 34 / 135\nWords: 3 ALS: 3 Word2Vec 1\nPrecision: 35.85 % Recall: 12.34  -  19 / 34 / 135\nWords: 4 ALS: 3 Word2Vec 1\nPrecision: 33.96 % Recall: 11.69  -  18 / 35 / 136\nWords: 5 ALS: 3 Word2Vec 1\nPrecision: 35.85 % Recall: 12.34  -  19 / 34 / 135\nWords: 1 ALS: 3 Word2Vec 2\nPrecision: 41.67 % Recall: 29.03  -  45 / 63 / 110\nWords: 2 ALS: 3 Word2Vec 2\nPrecision: 47.67 % Recall: 32.54  -  41 / 45 / 85\nWords: 3 ALS: 3 Word2Vec 2\nPrecision: 47.67 % Recall: 32.54  -  41 / 45 / 85\nWords: 4 ALS: 3 Word2Vec 2\nPrecision: 51.19 % Recall: 34.4  -  43 / 41 / 82\nWords: 5 ALS: 3 Word2Vec 2\nPrecision: 50.0 % Recall: 33.6  -  42 / 42 / 83\nWords: 1 ALS: 3 Word2Vec 3\nPrecision: 46.91 % Recall: 49.03  -  76 / 86 / 79\nWords: 2 ALS: 3 Word2Vec 3\nPrecision: 46.91 % Recall: 49.03  -  76 / 86 / 79\nWords: 3 ALS: 3 Word2Vec 3\nPrecision: 46.91 % Recall: 49.03  -  76 / 86 / 79\nWords: 4 ALS: 3 Word2Vec 3\nPrecision: 46.91 % Recall: 49.03  -  76 / 86 / 79\nWords: 5 ALS: 3 Word2Vec 3\nPrecision: 46.91 % Recall: 49.03  -  76 / 86 / 79\nWords: 1 ALS: 4 Word2Vec 1\nPrecision: 24.07 % Recall: 8.39  -  13 / 41 / 142\nWords: 2 ALS: 4 Word2Vec 1\nPrecision: 30.19 % Recall: 10.39  -  16 / 37 / 138\nWords: 3 ALS: 4 Word2Vec 1\nPrecision: 32.08 % Recall: 11.04  -  17 / 36 / 137\nWords: 4 ALS: 4 Word2Vec 1\nPrecision: 26.42 % Recall: 9.09  -  14 / 39 / 140\nWords: 5 ALS: 4 Word2Vec 1\nPrecision: 26.42 % Recall: 9.09  -  14 / 39 / 140\nWords: 1 ALS: 4 Word2Vec 2\nPrecision: 25.0 % Recall: 17.42  -  27 / 81 / 128\nWords: 2 ALS: 4 Word2Vec 2\nPrecision: 35.85 % Recall: 24.68  -  38 / 68 / 116\nWords: 3 ALS: 4 Word2Vec 2\nPrecision: 37.74 % Recall: 25.97  -  40 / 66 / 114\nWords: 4 ALS: 4 Word2Vec 2\nPrecision: 36.79 % Recall: 25.32  -  39 / 67 / 115\nWords: 5 ALS: 4 Word2Vec 2\nPrecision: 37.5 % Recall: 25.49  -  39 / 65 / 114\nWords: 1 ALS: 4 Word2Vec 3\nPrecision: 35.8 % Recall: 37.42  -  58 / 104 / 97\nWords: 2 ALS: 4 Word2Vec 3\nPrecision: 38.33 % Recall: 40.35  -  46 / 74 / 68\nWords: 3 ALS: 4 Word2Vec 3\nPrecision: 37.5 % Recall: 39.47  -  45 / 75 / 69\nWords: 4 ALS: 4 Word2Vec 3\nPrecision: 36.94 % Recall: 37.96  -  41 / 70 / 67\nWords: 5 ALS: 4 Word2Vec 3\nPrecision: 35.14 % Recall: 36.11  -  39 / 72 / 69\nWords: 1 ALS: 4 Word2Vec 4\nPrecision: 36.57 % Recall: 50.97  -  79 / 137 / 76\nWords: 2 ALS: 4 Word2Vec 4\nPrecision: 36.57 % Recall: 50.97  -  79 / 137 / 76\nWords: 3 ALS: 4 Word2Vec 4\nPrecision: 36.57 % Recall: 50.97  -  79 / 137 / 76\nWords: 4 ALS: 4 Word2Vec 4\nPrecision: 36.57 % Recall: 50.97  -  79 / 137 / 76\nWords: 5 ALS: 4 Word2Vec 4\nPrecision: 36.57 % Recall: 50.97  -  79 / 137 / 76\nWords: 1 ALS: 5 Word2Vec 1\nPrecision: 24.07 % Recall: 8.39  -  13 / 41 / 142\nWords: 2 ALS: 5 Word2Vec 1\nPrecision: 26.42 % Recall: 9.09  -  14 / 39 / 140\nWords: 3 ALS: 5 Word2Vec 1\nPrecision: 26.42 % Recall: 9.09  -  14 / 39 / 140\nWords: 4 ALS: 5 Word2Vec 1\nPrecision: 20.75 % Recall: 7.14  -  11 / 42 / 143\nWords: 5 ALS: 5 Word2Vec 1\nPrecision: 20.75 % Recall: 7.14  -  11 / 42 / 143\nWords: 1 ALS: 5 Word2Vec 2\nPrecision: 27.78 % Recall: 19.35  -  30 / 78 / 125\nWords: 2 ALS: 5 Word2Vec 2\nPrecision: 32.08 % Recall: 22.08  -  34 / 72 / 120\nWords: 3 ALS: 5 Word2Vec 2\nPrecision: 32.08 % Recall: 22.08  -  34 / 72 / 120\nWords: 4 ALS: 5 Word2Vec 2\nPrecision: 32.08 % Recall: 22.08  -  34 / 72 / 120\nWords: 5 ALS: 5 Word2Vec 2\nPrecision: 34.62 % Recall: 23.53  -  36 / 68 / 117\nWords: 1 ALS: 5 Word2Vec 3\nPrecision: 25.93 % Recall: 27.1  -  42 / 120 / 113\nWords: 2 ALS: 5 Word2Vec 3\nPrecision: 35.22 % Recall: 36.36  -  56 / 103 / 98\nWords: 3 ALS: 5 Word2Vec 3\nPrecision: 36.48 % Recall: 37.66  -  58 / 101 / 96\nWords: 4 ALS: 5 Word2Vec 3\nPrecision: 35.9 % Recall: 36.6  -  56 / 100 / 97\nWords: 5 ALS: 5 Word2Vec 3\nPrecision: 34.64 % Recall: 34.87  -  53 / 100 / 99\nWords: 1 ALS: 5 Word2Vec 4\nPrecision: 33.8 % Recall: 47.1  -  73 / 143 / 82\nWords: 2 ALS: 5 Word2Vec 4\nPrecision: 35.26 % Recall: 48.67  -  55 / 101 / 58\nWords: 3 ALS: 5 Word2Vec 4\nPrecision: 35.53 % Recall: 48.21  -  54 / 98 / 58\nWords: 4 ALS: 5 Word2Vec 4\nPrecision: 34.72 % Recall: 46.73  -  50 / 94 / 57\nWords: 5 ALS: 5 Word2Vec 4\nPrecision: 34.03 % Recall: 45.79  -  49 / 95 / 58\nWords: 1 ALS: 5 Word2Vec 5\nPrecision: 32.96 % Recall: 57.42  -  89 / 181 / 66\nWords: 2 ALS: 5 Word2Vec 5\nPrecision: 32.96 % Recall: 57.42  -  89 / 181 / 66\nWords: 3 ALS: 5 Word2Vec 5\nPrecision: 32.96 % Recall: 57.42  -  89 / 181 / 66\nWords: 4 ALS: 5 Word2Vec 5\nPrecision: 32.96 % Recall: 57.42  -  89 / 181 / 66\nWords: 5 ALS: 5 Word2Vec 5\nPrecision: 32.96 % Recall: 57.42  -  89 / 181 / 66\nWords: 1 ALS: 20 Word2Vec 1\nPrecision: 3.7 % Recall: 1.29  -  2 / 52 / 153\nWords: 2 ALS: 20 Word2Vec 1\nPrecision: 7.55 % Recall: 2.6  -  4 / 49 / 150\nWords: 3 ALS: 20 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 4 ALS: 20 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 5 ALS: 20 Word2Vec 1\nPrecision: 11.32 % Recall: 3.9  -  6 / 47 / 148\nWords: 1 ALS: 20 Word2Vec 2\nPrecision: 5.56 % Recall: 3.87  -  6 / 102 / 149\nWords: 2 ALS: 20 Word2Vec 2\nPrecision: 8.49 % Recall: 5.84  -  9 / 97 / 145\nWords: 3 ALS: 20 Word2Vec 2\nPrecision: 10.38 % Recall: 7.14  -  11 / 95 / 143\nWords: 4 ALS: 20 Word2Vec 2\nPrecision: 9.43 % Recall: 6.49  -  10 / 96 / 144\nWords: 5 ALS: 20 Word2Vec 2\nPrecision: 9.43 % Recall: 6.49  -  10 / 96 / 144\nWords: 1 ALS: 20 Word2Vec 3\nPrecision: 6.79 % Recall: 7.1  -  11 / 151 / 144\nWords: 2 ALS: 20 Word2Vec 3\nPrecision: 11.95 % Recall: 12.34  -  19 / 140 / 135\nWords: 3 ALS: 20 Word2Vec 3\nPrecision: 9.43 % Recall: 9.74  -  15 / 144 / 139\nWords: 4 ALS: 20 Word2Vec 3\nPrecision: 8.18 % Recall: 8.44  -  13 / 146 / 141\nWords: 5 ALS: 20 Word2Vec 3\nPrecision: 8.18 % Recall: 8.44  -  13 / 146 / 141\nWords: 1 ALS: 20 Word2Vec 4\nPrecision: 7.87 % Recall: 10.97  -  17 / 199 / 138\nWords: 2 ALS: 20 Word2Vec 4\nPrecision: 11.79 % Recall: 16.23  -  25 / 187 / 129\nWords: 3 ALS: 20 Word2Vec 4\nPrecision: 11.32 % Recall: 15.58  -  24 / 188 / 130\nWords: 4 ALS: 20 Word2Vec 4\nPrecision: 8.96 % Recall: 12.34  -  19 / 193 / 135\nWords: 5 ALS: 20 Word2Vec 4\nPrecision: 8.96 % Recall: 12.34  -  19 / 193 / 135\nWords: 1 ALS: 20 Word2Vec 5\nPrecision: 7.78 % Recall: 13.55  -  21 / 249 / 134\nWords: 2 ALS: 20 Word2Vec 5\nPrecision: 12.08 % Recall: 20.78  -  32 / 233 / 122\nWords: 3 ALS: 20 Word2Vec 5\nPrecision: 12.08 % Recall: 20.78  -  32 / 233 / 122\nWords: 4 ALS: 20 Word2Vec 5\nPrecision: 10.19 % Recall: 17.53  -  27 / 238 / 127\nWords: 5 ALS: 20 Word2Vec 5\nPrecision: 9.43 % Recall: 16.23  -  25 / 240 / 129\nWords: 1 ALS: 30 Word2Vec 1\nPrecision: 0.0 % Recall: 0.0  -  0 / 54 / 155\nWords: 2 ALS: 30 Word2Vec 1\nPrecision: 7.55 % Recall: 2.6  -  4 / 49 / 150\nWords: 3 ALS: 30 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 4 ALS: 30 Word2Vec 1\nPrecision: 11.32 % Recall: 3.9  -  6 / 47 / 148\nWords: 5 ALS: 30 Word2Vec 1\nPrecision: 11.32 % Recall: 3.9  -  6 / 47 / 148\nWords: 1 ALS: 30 Word2Vec 2\nPrecision: 0.0 % Recall: 0.0  -  0 / 108 / 155\nWords: 2 ALS: 30 Word2Vec 2\nPrecision: 6.6 % Recall: 4.55  -  7 / 99 / 147\nWords: 3 ALS: 30 Word2Vec 2\nPrecision: 9.43 % Recall: 6.49  -  10 / 96 / 144\nWords: 4 ALS: 30 Word2Vec 2\nPrecision: 7.55 % Recall: 5.19  -  8 / 98 / 146\nWords: 5 ALS: 30 Word2Vec 2\nPrecision: 6.6 % Recall: 4.55  -  7 / 99 / 147\nWords: 1 ALS: 30 Word2Vec 3\nPrecision: 1.85 % Recall: 1.94  -  3 / 159 / 152\nWords: 2 ALS: 30 Word2Vec 3\nPrecision: 7.55 % Recall: 7.79  -  12 / 147 / 142\nWords: 3 ALS: 30 Word2Vec 3\nPrecision: 8.18 % Recall: 8.44  -  13 / 146 / 141\nWords: 4 ALS: 30 Word2Vec 3\nPrecision: 6.29 % Recall: 6.49  -  10 / 149 / 144\nWords: 5 ALS: 30 Word2Vec 3\nPrecision: 6.29 % Recall: 6.49  -  10 / 149 / 144\nWords: 1 ALS: 30 Word2Vec 4\nPrecision: 3.7 % Recall: 5.16  -  8 / 208 / 147\nWords: 2 ALS: 30 Word2Vec 4\nPrecision: 8.49 % Recall: 11.69  -  18 / 194 / 136\nWords: 3 ALS: 30 Word2Vec 4\nPrecision: 8.02 % Recall: 11.04  -  17 / 195 / 137\nWords: 4 ALS: 30 Word2Vec 4\nPrecision: 5.19 % Recall: 7.14  -  11 / 201 / 143\nWords: 5 ALS: 30 Word2Vec 4\nPrecision: 5.66 % Recall: 7.79  -  12 / 200 / 142\nWords: 1 ALS: 30 Word2Vec 5\nPrecision: 4.81 % Recall: 8.39  -  13 / 257 / 142\nWords: 2 ALS: 30 Word2Vec 5\nPrecision: 8.3 % Recall: 14.29  -  22 / 243 / 132\nWords: 3 ALS: 30 Word2Vec 5\nPrecision: 7.55 % Recall: 12.99  -  20 / 245 / 134\nWords: 4 ALS: 30 Word2Vec 5\nPrecision: 6.79 % Recall: 11.69  -  18 / 247 / 136\nWords: 5 ALS: 30 Word2Vec 5\nPrecision: 5.66 % Recall: 9.74  -  15 / 250 / 139\nWords: 1 ALS: 40 Word2Vec 1\nPrecision: 5.56 % Recall: 1.94  -  3 / 51 / 152\nWords: 2 ALS: 40 Word2Vec 1\nPrecision: 7.55 % Recall: 2.6  -  4 / 49 / 150\nWords: 3 ALS: 40 Word2Vec 1\nPrecision: 7.55 % Recall: 2.6  -  4 / 49 / 150\nWords: 4 ALS: 40 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 5 ALS: 40 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 1 ALS: 40 Word2Vec 2\nPrecision: 2.78 % Recall: 1.94  -  3 / 105 / 152\nWords: 2 ALS: 40 Word2Vec 2\nPrecision: 5.66 % Recall: 3.9  -  6 / 100 / 148\nWords: 3 ALS: 40 Word2Vec 2\nPrecision: 8.49 % Recall: 5.84  -  9 / 97 / 145\nWords: 4 ALS: 40 Word2Vec 2\nPrecision: 7.55 % Recall: 5.19  -  8 / 98 / 146\nWords: 5 ALS: 40 Word2Vec 2\nPrecision: 6.6 % Recall: 4.55  -  7 / 99 / 147\nWords: 1 ALS: 40 Word2Vec 3\nPrecision: 3.09 % Recall: 3.23  -  5 / 157 / 150\nWords: 2 ALS: 40 Word2Vec 3\nPrecision: 6.92 % Recall: 7.14  -  11 / 148 / 143\nWords: 3 ALS: 40 Word2Vec 3\nPrecision: 8.18 % Recall: 8.44  -  13 / 146 / 141\nWords: 4 ALS: 40 Word2Vec 3\nPrecision: 6.92 % Recall: 7.14  -  11 / 148 / 143\nWords: 5 ALS: 40 Word2Vec 3\nPrecision: 6.29 % Recall: 6.49  -  10 / 149 / 144\nWords: 1 ALS: 40 Word2Vec 4\nPrecision: 4.63 % Recall: 6.45  -  10 / 206 / 145\nWords: 2 ALS: 40 Word2Vec 4\nPrecision: 8.02 % Recall: 11.04  -  17 / 195 / 137\nWords: 3 ALS: 40 Word2Vec 4\nPrecision: 7.55 % Recall: 10.39  -  16 / 196 / 138\nWords: 4 ALS: 40 Word2Vec 4\nPrecision: 5.66 % Recall: 7.79  -  12 / 200 / 142\nWords: 5 ALS: 40 Word2Vec 4\nPrecision: 6.13 % Recall: 8.44  -  13 / 199 / 141\nWords: 1 ALS: 40 Word2Vec 5\nPrecision: 4.44 % Recall: 7.74  -  12 / 258 / 143\nWords: 2 ALS: 40 Word2Vec 5\nPrecision: 7.55 % Recall: 12.99  -  20 / 245 / 134\nWords: 3 ALS: 40 Word2Vec 5\nPrecision: 7.17 % Recall: 12.34  -  19 / 246 / 135\nWords: 4 ALS: 40 Word2Vec 5\nPrecision: 5.28 % Recall: 9.09  -  14 / 251 / 140\nWords: 5 ALS: 40 Word2Vec 5\nPrecision: 5.66 % Recall: 9.74  -  15 / 250 / 139\nWords: 1 ALS: 50 Word2Vec 1\nPrecision: 5.56 % Recall: 1.94  -  3 / 51 / 152\nWords: 2 ALS: 50 Word2Vec 1\nPrecision: 7.55 % Recall: 2.6  -  4 / 49 / 150\nWords: 3 ALS: 50 Word2Vec 1\nPrecision: 7.55 % Recall: 2.6  -  4 / 49 / 150\nWords: 4 ALS: 50 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 5 ALS: 50 Word2Vec 1\nPrecision: 9.43 % Recall: 3.25  -  5 / 48 / 149\nWords: 1 ALS: 50 Word2Vec 2\nPrecision: 2.78 % Recall: 1.94  -  3 / 105 / 152\nWords: 2 ALS: 50 Word2Vec 2\nPrecision: 5.66 % Recall: 3.9  -  6 / 100 / 148\nWords: 3 ALS: 50 Word2Vec 2\nPrecision: 8.49 % Recall: 5.84  -  9 / 97 / 145\nWords: 4 ALS: 50 Word2Vec 2\nPrecision: 7.55 % Recall: 5.19  -  8 / 98 / 146\nWords: 5 ALS: 50 Word2Vec 2\nPrecision: 6.6 % Recall: 4.55  -  7 / 99 / 147\nWords: 1 ALS: 50 Word2Vec 3\nPrecision: 3.09 % Recall: 3.23  -  5 / 157 / 150\nWords: 2 ALS: 50 Word2Vec 3\nPrecision: 6.92 % Recall: 7.14  -  11 / 148 / 143\nWords: 3 ALS: 50 Word2Vec 3\nPrecision: 8.18 % Recall: 8.44  -  13 / 146 / 141\nWords: 4 ALS: 50 Word2Vec 3\nPrecision: 6.92 % Recall: 7.14  -  11 / 148 / 143\nWords: 5 ALS: 50 Word2Vec 3\nPrecision: 6.29 % Recall: 6.49  -  10 / 149 / 144\nWords: 1 ALS: 50 Word2Vec 4\nPrecision: 4.63 % Recall: 6.45  -  10 / 206 / 145\nWords: 2 ALS: 50 Word2Vec 4\nPrecision: 8.02 % Recall: 11.04  -  17 / 195 / 137\nWords: 3 ALS: 50 Word2Vec 4\nPrecision: 7.55 % Recall: 10.39  -  16 / 196 / 138\nWords: 4 ALS: 50 Word2Vec 4\nPrecision: 5.66 % Recall: 7.79  -  12 / 200 / 142\nWords: 5 ALS: 50 Word2Vec 4\nPrecision: 6.13 % Recall: 8.44  -  13 / 199 / 141\nWords: 1 ALS: 50 Word2Vec 5\nPrecision: 4.44 % Recall: 7.74  -  12 / 258 / 143\nWords: 2 ALS: 50 Word2Vec 5\nPrecision: 7.55 % Recall: 12.99  -  20 / 245 / 134\nWords: 3 ALS: 50 Word2Vec 5\nPrecision: 7.17 % Recall: 12.34  -  19 / 246 / 135\nWords: 4 ALS: 50 Word2Vec 5\nPrecision: 5.28 % Recall: 9.09  -  14 / 251 / 140\nWords: 5 ALS: 50 Word2Vec 5\nPrecision: 5.66 % Recall: 9.74  -  15 / 250 / 139\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538349890899_-402897789",
      "id": "20180930-202450_612497491",
      "dateCreated": "Sep 30, 2018 8:24:50 PM",
      "dateStarted": "Oct 6, 2018 7:01:27 PM",
      "dateFinished": "Oct 6, 2018 8:07:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Teste da técnica de Word Embeddings\r\n\r\npresent \u003d [\u0027History of Present Illness:\\n(.+\\n)+\u0027]\r\npast \u003d [\u0027Past Medical History:\\n(.+\\n\\n?)+\u0027]\r\n\r\nfile \u003d open(\"resultados_1006.csv\", \"w\")\r\n\r\nnum_ALS \u003d [1, 2, 3, 4, 5, 20, 30, 40, 50]\r\nnum_Word2Vec \u003d [1, 2, 3, 4, 5]\r\n\r\n#for als in num_ALS:\r\nals \u003d 1\r\ndic_recommend \u003d top_recomended_ALS(als)\r\n\r\nfor w2v in num_Word2Vec:\r\n    for num_words in range(1, 6):\r\n        \r\n        if als \u003e\u003d w2v:\r\n        \r\n            i \u003d tp \u003d fp \u003d fn \u003d 0\r\n            data_old \u003d paciente_old \u003d 0\r\n            \r\n            with open(\u0027test_data_20181006.csv\u0027) as csvfile:\r\n                readCSV \u003d csv.reader(csvfile, delimiter\u003d\u0027,\u0027)\r\n            \r\n                for row in readCSV:\r\n    \r\n                    data \u003d row[0]\r\n                    paciente \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[1])\r\n                    doenca \u003d re.sub(\u0027 \u0027, \u0027\u0027, row[2])\r\n                    \r\n                    if data !\u003d data_old or paciente !\u003d paciente_old:\r\n            \r\n                        data_old \u003d data\r\n                        paciente_old \u003d paciente\r\n    \r\n                        list \u003d dic_admissions.get(paciente)\r\n            \r\n                        if list is not None:\r\n                            valido \u003d False\r\n                            for x in list:\r\n                                if x in diagnoses:\r\n                                    valido \u003d True\r\n                                    \r\n                            if valido \u003d\u003d True:\r\n                                \r\n                                if als \u003e w2v:\r\n                            \r\n                                    only_present \u003d row[3]\r\n                                    words_text \u003d filter_words(only_present.lower())\r\n                                    diseases1 \u003d list_most_similar(words_text, paciente, num_words, w2v)\r\n                                    \r\n                                    if diseases1 !\u003d []:\r\n                                        pos \u003d 0\r\n                                        #print(diseases1)\r\n                                        for d in diseases1:\r\n                                            if (d in list):\r\n                                                tp \u003d tp + 1\r\n                                                pos \u003d pos + 1\r\n                                            else:\r\n                                                fp \u003d fp + 1\r\n        \r\n                                        fn \u003d fn + (len(list) - pos) #menor(, w2v)\r\n                                        \r\n                                        precision \u003d round(100 * tp / (tp + fp), 2)\r\n                                        recall \u003d round(100 * tp / (tp + fn), 2)\r\n                                else:\r\n                                    \r\n                                    d \u003d dictionary\r\n                                    diseases1 \u003d dic_recommend.get(str(int(paciente)))\r\n                                    \r\n                                    if diseases1 is not None:\r\n                                        pos \u003d 0\r\n\r\n                                        for d in diseases1:\r\n                                            if (d in list):\r\n                                                tp \u003d tp + 1\r\n                                                pos \u003d pos + 1\r\n                                            else:\r\n                                                fp \u003d fp + 1\r\n        \r\n                                        fn \u003d fn + (len(list) - pos) \r\n                                        \r\n                                        precision \u003d round(100 * tp / (tp + fp), 2)\r\n                                        recall \u003d round(100 * tp / (tp + fn), 2)\r\n                                            \r\n\r\n                print(\u0027Words:\u0027, num_words, \u0027ALS:\u0027, als, \u0027Word2Vec\u0027, w2v )\r\n                print(\u0027Precision:\u0027, precision, \u0027%\u0027, \u0027Recall:\u0027, recall,\u0027 - \u0027, tp, \u0027/\u0027, fp, \u0027/\u0027, fn)\r\n                file.write(\u0027\u0027 + str(num_words) + \u0027, \u0027 + str(als) + \u0027, \u0027 + str(w2v)  + \u0027, \u0027 + str(precision) + \u0027, \u0027 + str(recall) +\u0027\\n\u0027)\r\n\r\nfile.close()\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 3:03:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Words: 1 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 2 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 3 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 4 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\nWords: 5 ALS: 1 Word2Vec 1\nPrecision: 64.81 % Recall: 22.58  -  35 / 19 / 120\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538830218924_1955102856",
      "id": "20181006-095018_1511752800",
      "dateCreated": "Oct 6, 2018 9:50:18 AM",
      "dateStarted": "Oct 6, 2018 3:03:46 PM",
      "dateFinished": "Oct 6, 2018 3:03:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "dic_recommend",
      "user": "anonymous",
      "dateUpdated": "Oct 6, 2018 2:51:39 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "{\u002770745\u0027: [\u00272724\u0027, \u00274019\u0027, \u0027412\u0027, \u00275119\u0027, \u00274241\u0027], \u002745269\u0027: [\u0027496\u0027, \u00275849\u0027, \u00274439\u0027, \u0027412\u0027, \u00279971\u0027], \u00277078\u0027: [\u00275119\u0027, \u00274241\u0027, \u00275845\u0027, \u00272749\u0027, \u00275185\u0027], \u002771297\u0027: [\u00274019\u0027, \u00274139\u0027, \u00273484\u0027, \u00279971\u0027, \u00275185\u0027], \u002720759\u0027: [\u00274019\u0027, \u00275849\u0027, \u00274240\u0027, \u00272762\u0027, \u00279971\u0027], \u002715570\u0027: [\u00272762\u0027, \u00274019\u0027, \u00275845\u0027, \u0027570\u0027, \u00272761\u0027], \u002792212\u0027: [\u00275849\u0027, \u00272762\u0027, \u00275845\u0027, \u00275789\u0027, \u0027570\u0027], \u002719059\u0027: [\u00275849\u0027, \u00275789\u0027, \u00274439\u0027, \u00274254\u0027, \u00272762\u0027], \u002711141\u0027: [\u00272724\u0027, \u0027496\u0027, \u00274019\u0027, \u00274241\u0027, \u00279971\u0027], \u00273952\u0027: [\u00275849\u0027, \u00275789\u0027, \u00274439\u0027, \u00274254\u0027, \u00272762\u0027], \u002721220\u0027: [\u00275849\u0027, \u00272762\u0027, \u00275119\u0027, \u00275845\u0027, \u00274241\u0027], \u00274784\u0027: [\u00274240\u0027, \u00274019\u0027, \u00272762\u0027, \u00279971\u0027, \u00275845\u0027], \u002796686\u0027: [\u0027311\u0027, \u00275849\u0027, \u00272724\u0027, \u0027412\u0027, \u00272762\u0027], \u00273977\u0027: [\u00275849\u0027, \u00275789\u0027, \u00274439\u0027, \u00274254\u0027, \u00272762\u0027], \u002788594\u0027: [\u00272724\u0027, \u00275849\u0027, \u00274241\u0027, \u00275789\u0027, \u00273572\u0027], \u002778641\u0027: [\u00272724\u0027, \u00274019\u0027, \u00274241\u0027, \u00272749\u0027, \u00279971\u0027], \u00272338\u0027: [\u00275119\u0027, \u00275845\u0027, \u00272761\u0027, \u00274241\u0027, \u00272762\u0027], \u002712798\u0027: [\u00275849\u0027, \u00272762\u0027, \u00272761\u0027, \u00275789\u0027, \u00274439\u0027], \u002775824\u0027: [\u00274019\u0027, \u00275849\u0027, \u00274241\u0027, \u00275119\u0027, \u0027412\u0027], \u002724995\u0027: [\u0027412\u0027, \u0027311\u0027, \u00272762\u0027, \u00274241\u0027, \u00273572\u0027], \u002719029\u0027: [\u00272761\u0027, \u00275845\u0027, \u00275712\u0027, \u0027570\u0027, \u00275722\u0027], \u002777349\u0027: [\u00274019\u0027, \u0027412\u0027, \u0027311\u0027, \u00274241\u0027, \u00272749\u0027], \u002784465\u0027: [\u00272724\u0027, \u00274019\u0027, \u0027412\u0027, \u0027311\u0027, \u00274241\u0027], \u002710569\u0027: [\u00275849\u0027, \u00275789\u0027, \u00274439\u0027, \u00274254\u0027, \u00272762\u0027], \u002758163\u0027: [\u00275849\u0027, \u00272762\u0027, \u00272761\u0027, \u00275789\u0027, \u00274439\u0027], \u002722933\u0027: [\u0027496\u0027, \u00275849\u0027, \u00274439\u0027, \u00279971\u0027, \u00274254\u0027], \u002713599\u0027: [\u00275849\u0027, \u00274019\u0027, \u00272762\u0027, \u00275845\u0027, \u00275789\u0027], \u002719371\u0027: [\u00274019\u0027, \u00274139\u0027, \u00273484\u0027, \u00279971\u0027, \u00275185\u0027], \u00278426\u0027: [\u00275849\u0027, \u00272724\u0027, \u00272762\u0027, \u00275845\u0027, \u00274241\u0027], \u00279233\u0027: [\u00272762\u0027, \u0027412\u0027, \u00275845\u0027, \u00274241\u0027, \u00272749\u0027], \u002730183\u0027: [\u00272762\u0027, \u00275845\u0027, \u0027570\u0027, \u00275185\u0027, \u00279971\u0027], \u002727726\u0027: [\u0027496\u0027, \u00275119\u0027, \u00274241\u0027, \u00275845\u0027, \u00272749\u0027], \u002710854\u0027: [\u00274019\u0027, \u00274139\u0027, \u00273484\u0027, \u00279971\u0027, \u00275185\u0027], \u00277613\u0027: [\u00272762\u0027, \u00275845\u0027, \u00272761\u0027, \u00275119\u0027, \u0027570\u0027], \u00272512\u0027: [\u0027412\u0027, \u00272749\u0027, \u00274241\u0027, \u00273572\u0027, \u00274439\u0027], \u002774346\u0027: [\u00275849\u0027, \u00274019\u0027, \u00275119\u0027, \u00274241\u0027, \u00272749\u0027], \u002724573\u0027: [\u0027496\u0027, \u00279971\u0027, \u00274439\u0027, \u00274241\u0027, \u00277907\u0027], \u002727665\u0027: [\u00275849\u0027, \u0027412\u0027, \u0027311\u0027, \u00272762\u0027, \u00274439\u0027], \u00272197\u0027: [\u00274019\u0027, \u0027311\u0027, \u00272762\u0027, \u0027496\u0027, \u0027430\u0027], \u002728013\u0027: [\u00272724\u0027, \u0027311\u0027, \u00274019\u0027, \u00273572\u0027, \u00274241\u0027], \u002718250\u0027: [\u00272724\u0027, \u00274019\u0027, \u00275849\u0027, \u0027496\u0027, \u00272762\u0027], \u00278698\u0027: [\u00275119\u0027, \u0027412\u0027, \u00274241\u0027, \u00272762\u0027, \u00272724\u0027], \u002755992\u0027: [\u00274019\u0027, \u00275849\u0027, \u00275789\u0027, \u00274439\u0027, \u00277907\u0027], \u002712567\u0027: [\u00272724\u0027, \u00274019\u0027, \u0027311\u0027, \u0027412\u0027, \u00272762\u0027], \u002721362\u0027: [\u00275119\u0027, \u00274241\u0027, \u00275845\u0027, \u00272749\u0027, \u00275185\u0027], \u00277666\u0027: [\u00275849\u0027, \u0027412\u0027, \u0027311\u0027, \u00274439\u0027, \u00272762\u0027], \u002773612\u0027: [\u00272724\u0027, \u0027496\u0027, \u00274019\u0027, \u00274241\u0027, \u00279971\u0027], \u002776435\u0027: [\u0027311\u0027, \u00274240\u0027, \u00273572\u0027, \u00274254\u0027, \u00272761\u0027], \u00278312\u0027: [\u00274019\u0027, \u00274139\u0027, \u00273484\u0027, \u00279971\u0027, \u00275185\u0027], \u0027406\u0027: [\u0027311\u0027, \u0027412\u0027, \u00272761\u0027, \u00275845\u0027, \u00273572\u0027], \u002772847\u0027: [\u00274019\u0027, \u0027311\u0027, \u00272762\u0027, \u0027496\u0027, \u0027430\u0027], \u002711861\u0027: [\u0027311\u0027, \u00272724\u0027, \u00275849\u0027, \u00273572\u0027, \u00275363\u0027]}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1538838398713_-1248040724",
      "id": "20181006-120638_670888399",
      "dateCreated": "Oct 6, 2018 12:06:38 PM",
      "dateStarted": "Oct 6, 2018 2:51:40 PM",
      "dateFinished": "Oct 6, 2018 2:51:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1538848299949_1266482841",
      "id": "20181006-145139_1554746155",
      "dateCreated": "Oct 6, 2018 2:51:39 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "06. Spark + Word2Vec",
  "id": "2DRQY2DN1",
  "angularObjects": {
    "2DFFMJW2D:shared_process": [],
    "2DE4C8UXA:shared_process": [],
    "2DFNF7F86:shared_process": [],
    "2DDMFQ4NT:shared_process": [],
    "2DF4JHTJS:shared_process": [],
    "2DGTDKVBY:shared_process": [],
    "2DDX1FHE4:shared_process": [],
    "2DGBVAR63:shared_process": [],
    "2DE1HTE4B:shared_process": [],
    "2DFUMJA2M:shared_process": [],
    "2DF3EN9Y8:shared_process": [],
    "2DFG8QFKG:shared_process": [],
    "2DE19T4UN:shared_process": [],
    "2DDZ2CZF6:shared_process": [],
    "2DGYH4B9E:shared_process": [],
    "2DEG6W7VR:shared_process": [],
    "2DFPD3S3G:shared_process": [],
    "2DHACHYJ3:shared_process": [],
    "2DDRJAE6Z:shared_process": []
  },
  "config": {},
  "info": {}
}